{"version":3,"sources":["./src/app/user/auth.guard.ts","./src/app/user/login/login.component.ts","./src/app/user/login/login.component.html","./src/app/user/profile/profile.component.ts","./src/app/user/profile/profile.component.html","./src/app/user/register/register.component.ts","./src/app/user/register/register.component.html","./src/app/user/user.module.ts","./src/app/user/user.routes.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;;;;AAOpC,MAAM,SAAS;IACpB,YAAoB,WAAwB,EAAU,MAAc;QAAhD,gBAAW,GAAX,WAAW,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;IACzE,WAAW,CACX,KAA6B,EAC7B,KAA0B;QAC1B,MAAM,QAAQ,GAAW,KAAK,CAAC,GAAG,CAAC;QACnC,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;IAED,OAAO,CAAC,QAAgB;QACtB,IAAI,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,EAAE;YACtC,OAAO,IAAI,CAAC;SACb;QACD,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,QAAQ,CAAC;QACxC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAE,EAAC,WAAW,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,EAAC,CAAE,CAAC;IACzE,CAAC;;kEAfQ,SAAS;4FAAT,SAAS,WAAT,SAAS,mBAFR,MAAM;6FAEP,SAAS;cAHrB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAC0B;AACrC;;;;;AAShC,MAAM,cAAc;IAGvB,YAAoB,WAAwB,EAAS,WAAwB,EAAS,MAAa;QAA/E,gBAAW,GAAX,WAAW,CAAa;QAAS,gBAAW,GAAX,WAAW,CAAa;QAAS,WAAM,GAAN,MAAM,CAAO;QAC/F,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACpC,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACnC,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACtC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ;IAER,CAAC;IAED,MAAM;QACF,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAED,SAAS,CAAC,UAAU;QAChB,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC;aACrC,IAAI,CAAC,4DAAK,EAAE,CAAC,CAAC,SAAS,CACpB,IAAI,CAAC,EAAE;YACH,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC;YACnF,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACrC,CAAC,EACL,KAAK,CAAC,EAAE;YACJ,KAAK,CAAC,yDAAyD,CAAC;YAChE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;QACtB,CAAC,CACJ,CAAC;IACN,CAAC;;4EA9BQ,cAAc;8FAAd,cAAc;QCX3B,qEAAI;QAAA,8EAAmB;QAAA,4DAAK;QAE5B,0EACI;QAD0B,0IAAY,kCAA0B,IAAC;QACjE,yEACI;QAAA,2EAAsB;QAAA,oEAAS;QAAA,4DAAQ;QACvC,sEACJ;QAAA,4DAAM;QACN,yEACI;QAAA,2EAAsB;QAAA,oEAAS;QAAA,4DAAQ;QACvC,uEACJ;QAAA,4DAAM;QACN,0EACI;QAAA,6EAA8C;QAAA,iEAAK;QAAA,4DAAS;QAC5D,6EAAiE;QAAnB,uIAAS,YAAQ,IAAC;QAAC,kEAAM;QAAA,4DAAS;QACpF,4DAAM;QACV,4DAAO;;QAbD,0DAAuB;QAAvB,oFAAuB;;6FDShB,cAAc;cAL1B,uDAAS;eAAC;gBACX,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAC,uBAAuB,CAAC;aACnC;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;;ICK9C,qEAAqG;IAAA,4DAAC;IAAA,4DAAK;;;IAM3G,qEAAmG;IAAA,4DAAC;IAAA,4DAAK;;;IAMzG,qEAA2F;IAAA,4DAAC;IAAA,4DAAK;;;IAMjG,qEAAiG;IAAA,4DAAC;IAAA,4DAAK;;;IAMvG,qEAAiG;IAAA,4DAAC;IAAA,4DAAK;;;ADlBpG,MAAM,gBAAgB;IAgB3B,YAAoB,MAAa,EAAU,WAAuB,EAAU,WAAwB;QAAhF,WAAM,GAAN,MAAM,CAAO;QAAU,gBAAW,GAAX,WAAW,CAAY;QAAU,gBAAW,GAAX,WAAW,CAAa;QAZpG,gBAAW,GAAc,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC9C,EAAE,EAAE,CAAC,EAAE,CAAC;YACR,UAAU,EAAE,CAAC,EAAE,CAAC;YAChB,SAAS,EAAE,CAAC,EAAE,CAAC;YACf,KAAK,EAAE,CAAC,EAAE,CAAC;YACX,QAAQ,EAAE,CAAC,EAAE,CAAC;YACd,QAAQ,EAAE,CAAC,EAAE,CAAC;YACd,YAAY,EAAE,CAAC,EAAE,CAAC;YAClB,gBAAgB,EAAE,CAAC,EAAE,CAAC;SACvB,CAAC,CAAC;QAID,IAAG,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,IAAI,IAAI,EAAE;YAC7C,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;SACnE;IACH,CAAC;IAED,UAAU,CAAC,UAAU;QACnB,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;YAC5D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QAEN,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;YACxB,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE;YACvB,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;YACvC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS;YACrC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK;YAC7B,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ;YACnC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ;YACnC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,YAAY;YAC3C,gBAAgB,EAAE,IAAI,CAAC,WAAW,CAAC,gBAAgB;SACpD,CAAC,CAAC;QACH,CAAC;IACH,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;IAC5B,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;;gFAjDU,gBAAgB;gGAAhB,gBAAgB;QCV7B,qEAAI;QAAA,6EAAkB;QAAA,4DAAK;QAE3B,0EACE;QAD8B,4IAAY,qCAA6B,IAAC;QACxE,yEACE;QAAA,0GAAqG;QACrG,2EAAwB;QAAA,sEAAW;QAAA,4DAAQ;QAC3C,2EACF;QADsC,yKAAkC;QAAtE,4DACF;QAAA,4DAAM;QAEN,yEACE;QAAA,0GAAmG;QACnG,4EAAuB;QAAA,sEAAU;QAAA,4DAAQ;QACzC,4EACF;QADqC,yKAAiC;QAApE,4DACF;QAAA,4DAAM;QAEN,0EACE;QAAA,4GAA2F;QAC3F,4EAAmB;QAAA,kEAAM;QAAA,4DAAQ;QACjC,4EACF;QADiC,qKAA6B;QAA5D,4DACF;QAAA,4DAAM;QAEN,0EACE;QAAA,4GAAiG;QACjG,4EAAsB;QAAA,qEAAS;QAAA,4DAAQ;QACvC,6EACF;QADoC,wKAAgC;QAAlE,4DACF;QAAA,4DAAM;QAEN,0EACE;QAAA,4GAAiG;QACjG,6EAAsB;QAAA,qEAAS;QAAA,4DAAQ;QACvC,6EACF;QADoC,wKAAgC;QAAlE,4DACF;QAAA,4DAAM;QAEN,2EACE;QAAA,8EAA8C;QAAA,gEAAI;QAAA,4DAAS;QAC3D,8EAAiE;QAAnB,yIAAS,YAAQ,IAAC;QAAC,kEAAM;QAAA,4DAAS;QAClF,4DAAM;QACR,4DAAO;;QAnCD,0DAAyB;QAAzB,sFAAyB;QACL,0DAAiH;QAAjH,qVAAiH;QACnI,0DAAgG;QAAhG,0QAAgG;QAK7E,0DAA+G;QAA/G,iVAA+G;QAClI,0DAA8F;QAA9F,sQAA8F;QAK3E,0DAAuG;QAAvG,iUAAuG;QAC1H,0DAAsF;QAAtF,sPAAsF;QAKnE,0DAA6G;QAA7G,6UAA6G;QAChI,0DAA4F;QAA5F,kQAA4F;QAKzE,0DAA6G;QAA7G,6UAA6G;QAChI,0DAA4F;QAA5F,kQAA4F;;6FDlBvF,gBAAgB;cAL5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,0BAA0B,CAAC;aACxC;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;;ICM5C,qEAAqG;IAAA,4DAAC;IAAA,4DAAK;;;IAMzG,qEAAmG;IAAA,4DAAC;IAAA,4DAAK;;;IAMzG,qEAA2F;IAAA,4DAAC;IAAA,4DAAK;;;IAMjG,qEAAiG;IAAA,4DAAC;IAAA,4DAAK;;;IAMvG,qEAAiG;IAAA,4DAAC;IAAA,4DAAK;;;ADpBxG,MAAM,iBAAiB;IAI5B,YAAoB,WAAwB,EAAU,MAAc;QAAhD,gBAAW,GAAX,WAAW,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;QADpE,YAAO,GAAW,IAAI;IAGtB,CAAC;IAED,QAAQ,CAAC,IAAI;QACX,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;YACrD,IAAI,CAAC,OAAO,GAAG,KAAK;YACpB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;IACvC,CAAC;IAED,QAAQ;IAER,CAAC;;kFArBU,iBAAiB;iGAAjB,iBAAiB;;QCV9B,qEAAI;QAAA,kFAAuB;QAAA,4DAAK;QAEhC,yEACE;QAAA,6EAEE;QAF2B,yRAAY,uBAA4B,IAAC;QAEpE,yEACE;QAAA,2GAAqG;QACrG,2EAAwB;QAAA,sEAAW;QAAA,4DAAQ;QAC3C,2EACF;QADS,sKAA8B;QAArC,4DACF;QAAA,4DAAM;QAEN,0EACI;QAAA,6GAAmG;QACnG,4EAAuB;QAAA,sEAAU;QAAA,4DAAQ;QACzC,4EACJ;QADW,sKAA6B;QAApC,4DACJ;QAAA,4DAAM;QAEN,0EACI;QAAA,6GAA2F;QAC3F,4EAAmB;QAAA,uEAAW;QAAA,4DAAQ;QACtC,6EACJ;QADW,kKAAyB;QAAhC,4DACJ;QAAA,4DAAM;QAEN,0EACI;QAAA,6GAAiG;QACjG,6EAAsB;QAAA,qEAAS;QAAA,4DAAQ;QACvC,6EACJ;QADW,qKAA4B;QAAnC,4DACJ;QAAA,4DAAM;QAEN,0EACI;QAAA,6GAAiG;QACjG,6EAAsB;QAAA,qEAAS;QAAA,4DAAQ;QACvC,6EACJ;QADW,qKAA4B;QAAnC,4DACJ;QAAA,4DAAM;QAEN,2EACE;QAAA,8EAA8C;QAAA,oEAAQ;QAAA,4DAAS;QAC/D,8EAAiE;QAAnB,0IAAS,YAAQ,IAAC;QAAC,kEAAM;QAAA,4DAAS;QAClF,4DAAM;QACR,4DAAO;QACT,4DAAM;;;QAnCsB,0DAA6G;QAA7G,qSAA6G;QAC/H,0DAAgG;QAAhG,0NAAgG;QAK9E,0DAA2G;QAA3G,iSAA2G;QAC3H,0DAA8F;QAA9F,sNAA8F;QAK9E,0DAAmG;QAAnG,iRAAmG;QACnH,0DAAsF;QAAtF,sMAAsF;QAKtE,0DAAyG;QAAzG,6RAAyG;QACzH,0DAA4F;QAA5F,kNAA4F;QAK5E,0DAAyG;QAAzG,6RAAyG;QACzH,0DAA4F;QAA5F,kNAA4F;;6FDpB3F,iBAAiB;cAL7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,WAAW,EAAE,2BAA2B;gBACxC,SAAS,EAAE,CAAC,2BAA2B,CAAC;aACzC;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACM;AACA;AACmB;AAEvB;AACoB;AACL;AACQ;;;AAkB1D,MAAM,UAAU;;yFAAV,UAAU;8IAAV,UAAU,mBAJV,EAEV,YAbQ;YACP,4DAAY;YACZ,0DAAW;YACX,kEAAmB;YACnB,4DAAY,CAAC,QAAQ,CAAC,uDAAU,CAAC;SAClC;mIAUU,UAAU,mBARnB,2EAAgB;QAChB,qEAAc;QACd,8EAAiB,aARjB,4DAAY;QACZ,0DAAW;QACX,kEAAmB;6FAYV,UAAU;cAhBtB,sDAAQ;eAAC;gBACR,OAAO,EAAE;oBACP,4DAAY;oBACZ,0DAAW;oBACX,kEAAmB;oBACnB,4DAAY,CAAC,QAAQ,CAAC,uDAAU,CAAC;iBAClC;gBACD,YAAY,EAAE;oBACZ,2EAAgB;oBAChB,qEAAc;oBACd,8EAAiB;iBAClB;gBACD,SAAS,EAAE,EAEV;aACF;;;;;;;;;;;;;;ACzBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+D;AACN;AACS;AAC1B;AAEjC,MAAM,UAAU,GAAG;IACxB,EAAC,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,2EAAgB,EAAE,WAAW,EAAE,CAAC,qDAAS,CAAC,EAAE;IACzE,EAAC,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,8EAAiB,EAAC;IAChD,EAAC,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,qEAAc,EAAC;CAC3C","file":"src-app-user-user-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';\nimport { AuthService } from './../services/index';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService ,private router: Router ) {}\n  canActivate(\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot): boolean {\n  const routeurl: string = state.url;\n  return this.isLogin(routeurl);\n  }\n  \n  isLogin(routeurl: string) {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    }\n    this.authService.redirectUrl = routeurl;\n    this.router.navigate(['/main'], {queryParams: { returnUrl: routeurl }} );\n    }\n  \n}\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, NgForm } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from './../../services/index';\r\n\r\n@Component({\r\nselector: 'app-login',\r\ntemplateUrl: './login.component.html',\r\nstyleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n    loginForm: FormGroup;\r\n    constructor(private formBuilder: FormBuilder,private authService: AuthService,private router:Router) {\r\n        this.loginForm = this.formBuilder.group({\r\n            username: ['', Validators.required],\r\n            password: ['', Validators.required]\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n\r\n    cancel() {\r\n        this.router.navigate(['main'])\r\n    }\r\n\r\n    postLogin(formValues) {\r\n        this.authService.userlogin(formValues)\r\n        .pipe(first()).subscribe(\r\n            data => {\r\n                const redirect = this.authService.redirectUrl ? this.authService.redirectUrl : '/main';\r\n                    this.router.navigate([redirect]);\r\n                },\r\n            error => {\r\n                alert(\"username or password entered doesn't match our records.\")\r\n                console.log(error)\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\n  \r\n","<h1>Login to an account</h1>\r\n\r\n<form [formGroup]=\"loginForm\" (ngSubmit)=\"postLogin(loginForm.value)\" autocomplete=\"off\" >\r\n    <div class=\"form-group\">\r\n        <label for=\"username\">Username:</label>\r\n        <input type=\"username\" name=\"username\" formControlName=\"username\" autocomplete=\"off\" class=\"form-control input-sm\" placeholder=\"username\">\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label for=\"Password\">Password:</label>\r\n        <input type=\"password\" name=\"Password\" formControlName=\"password\" autocomplete=\"off\" class=\"form-control input-sm\" placeholder=\"Password\">\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <button type=\"submit\" class=\"btn btn-primary\">Login</button>\r\n        <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">Cancel</button>\r\n    </div>\r\n</form>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { Router} from '@angular/router';\nimport { IUser } from 'src/app/models';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent implements OnInit {\n\n  currentUser: IUser;\n  \n  profileForm: FormGroup = this.formBuilder.group({\n    id: [''],\n    first_name: [''],\n    last_name: [''],\n    email: [''],\n    username: [''],\n    password: [''],\n    date_created: [''],\n    permission_level: ['']\n  });\n  \n\n  constructor(private router:Router, private authService:AuthService, private formBuilder: FormBuilder) {\n    if(this.authService.isAuthenticated() == true) {\n      this.authService.currentUser.subscribe(x => this.currentUser = x);\n    }\n  }\n\n  updateUser(formValues) { \n    this.authService.updateCurrentUser(formValues).subscribe(() => {\n      this.router.navigate(['/main']);\n    });\n  }\n\n  ngOnInit() {\n\n    this.profileForm.setValue({\n      id: this.currentUser.id,\n      first_name: this.currentUser.first_name,\n      last_name: this.currentUser.last_name,\n      email: this.currentUser.email,\n      username: this.currentUser.username,\n      password: this.currentUser.password,\n      date_created: this.currentUser.date_created,\n      permission_level: this.currentUser.permission_level,\n    });\n    ;\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n  \n  cancel() {\n    this.router.navigate(['main'])\n  }\n       \n}\n","\n<h1>Edit Your Profile </h1>\n\n<form [formGroup]=\"profileForm\" (ngSubmit)=\"updateUser(profileForm.value)\" autocomplete=\"off\" novalidate>\n  <div class=\"form-group\" [ngClass]=\"{'error' : (profileForm.controls.first_name?.invalid) && (profileForm.controls.first_name?.touched) }\">\n    <em *ngIf=\"(profileForm.controls.first_name?.invalid) && (profileForm.controls.first_name?.touched)\">*</em>\n    <label for=\"first_name\">First Name:</label>\n    <input formControlName=\"first_name\" (ngModel)=\"currentUser.first_name\" name=\"first_name\" id=\"first_name\" type=\"text\" class=\"form-control\" placeholder=\"First Name...\" />\n  </div>\n\n  <div class=\"form-group\"  [ngClass]=\"{'error' : (profileForm.controls.last_name?.invalid) && (profileForm.controls.last_name?.touched) }\">\n    <em *ngIf=\"(profileForm.controls.last_name?.invalid) && (profileForm.controls.last_name?.touched)\">*</em>\n    <label for=\"last_name\">Last Name:</label>\n    <input formControlName=\"last_name\" (ngModel)=\"currentUser.last_name\" name=\"last_name\" id=\"last_name\" type=\"text\" class=\"form-control\" placeholder=\"Last Name...\" />\n  </div>\n\n  <div class=\"form-group\"  [ngClass]=\"{'error' : (profileForm.controls.email?.invalid) && (profileForm.controls.email?.touched) }\">\n    <em *ngIf=\"(profileForm.controls.email?.invalid) && (profileForm.controls.email?.touched)\">*</em>\n    <label for=\"email\">Email:</label>\n    <input formControlName=\"email\" (ngModel)=\"currentUser.email\" name=\"email\" id=\"email\" type=\"text\" class=\"form-control\" placeholder=\"email\" />\n  </div>\n\n  <div class=\"form-group\"  [ngClass]=\"{'error' : (profileForm.controls.username?.invalid) && (profileForm.controls.username?.touched) }\">\n    <em *ngIf=\"(profileForm.controls.username?.invalid) && (profileForm.controls.username?.touched)\">*</em>\n    <label for=\"username\">Username:</label>\n    <input formControlName=\"username\" (ngModel)=\"currentUser.username\" name=\"username\" id=\"username\" type=\"text\" class=\"form-control\" placeholder=\"Username\" />\n  </div>\n\n  <div class=\"form-group\"  [ngClass]=\"{'error' : (profileForm.controls.password?.invalid) && (profileForm.controls.password?.touched) }\">\n    <em *ngIf=\"(profileForm.controls.password?.invalid) && (profileForm.controls.password?.touched)\">*</em>\n    <label for=\"password\">Password:</label>\n    <input formControlName=\"password\" (ngModel)=\"currentUser.password\" name=\"password\" id=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Password\" />\n  </div>\n  \n  <div class=\"form-group\">\n    <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">Cancel</button>\n  </div>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from './../../services/auth.service';\nimport { IUser } from './../../models/index';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  newUser: IUser;\n  isDirty:boolean = true\n  constructor(private authService: AuthService, private router: Router) {\n\n  }\n\n  saveUser(user) {\n    this.authService.userRegistration(user).subscribe(() => {\n      this.isDirty = false\n      this.router.navigate(['/user/login'])\n    });\n  }\n\n  cancel() {\n    this.router.navigate(['/user/login'])\n  }\n\n  ngOnInit(): void {\n\n  }\n}\n","<h1>Register for an Account</h1>\n\n<div class=\"col-md-6\">\n  <form #registerForm=\"ngForm\" (ngSubmit)=\"saveUser(registerForm.value)\" autocomplete=\"off\" novalidate>\n    \n    <div class=\"form-group\" [ngClass]=\"{'error': registerForm.controls.first_name?.invalid && registerForm.controls.first_name?.touched}\">\n      <em *ngIf=\"registerForm.controls.first_name?.invalid && (registerForm.controls.first_name?.touched)\">*</em>\n      <label for=\"first_name\">First name:</label>\n      <input (ngModel)=\"newUser.first_name\" name=\"first_name\" required id=\"first_name\" type=\"text\" class=\"form-control\" placeholder=\"first name\" />\n    </div>\n\n    <div class=\"form-group\" [ngClass]=\"{'error': registerForm.controls.last_name?.invalid && registerForm.controls.last_name?.touched}\">\n        <em *ngIf=\"registerForm.controls.last_name?.invalid && (registerForm.controls.last_name?.touched)\">*</em>\n        <label for=\"last_name\">Last name:</label>\n        <input (ngModel)=\"newUser.last_name\" name=\"last_name\" required id=\"last_name\" type=\"text\" class=\"form-control\" placeholder=\"last name\" />\n    </div>\n\n    <div class=\"form-group\" [ngClass]=\"{'error': registerForm.controls.email?.invalid && registerForm.controls.email?.touched}\">\n        <em *ngIf=\"registerForm.controls.email?.invalid && (registerForm.controls.email?.touched)\">*</em>\n        <label for=\"email\">User email:</label>\n        <input (ngModel)=\"newUser.email\" name=\"email\" required id=\"email\" type=\"text\" class=\"form-control\" placeholder=\"email\" />\n    </div>\n\n    <div class=\"form-group\" [ngClass]=\"{'error': registerForm.controls.username?.invalid && registerForm.controls.username?.touched}\">\n        <em *ngIf=\"registerForm.controls.username?.invalid && (registerForm.controls.username?.touched)\">*</em>\n        <label for=\"username\">Username:</label>\n        <input (ngModel)=\"newUser.username\" name=\"username\" required id=\"username\" type=\"text\" class=\"form-control\" placeholder=\"username\" />\n    </div>\n\n    <div class=\"form-group\" [ngClass]=\"{'error': registerForm.controls.password?.invalid && registerForm.controls.password?.touched}\">\n        <em *ngIf=\"registerForm.controls.password?.invalid && (registerForm.controls.password?.touched)\">*</em>\n        <label for=\"password\">Password:</label>\n        <input (ngModel)=\"newUser.password\" name=\"password\" required id=\"password\" type=\"text\" class=\"form-control\" placeholder=\"password\" />\n    </div>\n    \n    <div class=\"form-group\">\n      <button type=\"submit\" class=\"btn btn-primary\">Register</button>\n      <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">Cancel</button>\n    </div>\n  </form>\n</div>","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { RouterModule } from '@angular/router'\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\r\n\r\nimport { userRoutes } from './user.routes'\r\nimport { ProfileComponent } from './profile/profile.component'\r\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component'\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild(userRoutes)\r\n  ],\r\n  declarations: [\r\n    ProfileComponent,\r\n    LoginComponent,\r\n    RegisterComponent\r\n  ],\r\n  providers: [\r\n\r\n  ]\r\n})\r\nexport class UserModule { }","import { ProfileComponent } from './profile/profile.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { AuthGuard } from './auth.guard'\r\n\r\nexport const userRoutes = [\r\n  {path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] },\r\n  {path: 'register', component: RegisterComponent},\r\n  {path: 'login', component: LoginComponent}\r\n]"],"sourceRoot":"webpack:///"}